// Code generated by goa v3.2.0, DO NOT EDIT.
//
// empfetcher HTTP server types
//
// Command:
// $ goa gen github.com/flexera/empfetcher/design

package server

import (
	empfetcher "github.com/flexera/empfetcher/gen/empfetcher"
	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "empfetcher" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Unique ID of an Employee
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of an Employee
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The Department of an Employee
	Department *string `form:"department,omitempty" json:"department,omitempty" xml:"department,omitempty"`
	// Address of an Employee
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Skillsets of an Employee
	Skills *string `form:"skills,omitempty" json:"skills,omitempty" xml:"skills,omitempty"`
}

// UpdateRequestBody is the type of the "empfetcher" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	// Name of an Employee
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The Department of an Employee
	Department *string `form:"department,omitempty" json:"department,omitempty" xml:"department,omitempty"`
	// Address of an Employee
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Skillsets of an Employee
	Skills *string `form:"skills,omitempty" json:"skills,omitempty" xml:"skills,omitempty"`
}

// ListResponseBody is the type of the "empfetcher" service "list" endpoint
// HTTP response body.
type ListResponseBody []*EmployeePayloadResponse

// ShowOKResponseBody is the type of the "empfetcher" service "show" endpoint
// HTTP response body.
type ShowOKResponseBody struct {
	// Unique ID of an Employee
	ID string `form:"id" json:"id" xml:"id"`
	// Name of an Employee
	Name string `form:"name" json:"name" xml:"name"`
	// The Department of an Employee
	Department string `form:"department" json:"department" xml:"department"`
	// Address of an Employee
	Address string `form:"address" json:"address" xml:"address"`
	// Skillsets of an Employee
	Skills string `form:"skills" json:"skills" xml:"skills"`
}

// ViewdeletedResponseBody is the type of the "empfetcher" service
// "viewdeleted" endpoint HTTP response body.
type ViewdeletedResponseBody []*EmployeePayloadResponse

// SearchResponseBody is the type of the "empfetcher" service "search" endpoint
// HTTP response body.
type SearchResponseBody []*EmployeePayloadResponse

// AddUnauthorizedResponseBody is the type of the "empfetcher" service "add"
// endpoint HTTP response body for the "unauthorized" error.
type AddUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddForbiddenResponseBody is the type of the "empfetcher" service "add"
// endpoint HTTP response body for the "forbidden" error.
type AddForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddBadGatewayResponseBody is the type of the "empfetcher" service "add"
// endpoint HTTP response body for the "bad_gateway" error.
type AddBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddBadRequestResponseBody is the type of the "empfetcher" service "add"
// endpoint HTTP response body for the "bad_request" error.
type AddBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddInternalErrorResponseBody is the type of the "empfetcher" service "add"
// endpoint HTTP response body for the "internal_error" error.
type AddInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateUnauthorizedResponseBody is the type of the "empfetcher" service
// "update" endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateForbiddenResponseBody is the type of the "empfetcher" service "update"
// endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBadGatewayResponseBody is the type of the "empfetcher" service
// "update" endpoint HTTP response body for the "bad_gateway" error.
type UpdateBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBadRequestResponseBody is the type of the "empfetcher" service
// "update" endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateInternalErrorResponseBody is the type of the "empfetcher" service
// "update" endpoint HTTP response body for the "internal_error" error.
type UpdateInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListUnauthorizedResponseBody is the type of the "empfetcher" service "list"
// endpoint HTTP response body for the "unauthorized" error.
type ListUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListForbiddenResponseBody is the type of the "empfetcher" service "list"
// endpoint HTTP response body for the "forbidden" error.
type ListForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListBadGatewayResponseBody is the type of the "empfetcher" service "list"
// endpoint HTTP response body for the "bad_gateway" error.
type ListBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListBadRequestResponseBody is the type of the "empfetcher" service "list"
// endpoint HTTP response body for the "bad_request" error.
type ListBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListInternalErrorResponseBody is the type of the "empfetcher" service "list"
// endpoint HTTP response body for the "internal_error" error.
type ListInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowUnauthorizedResponseBody is the type of the "empfetcher" service "show"
// endpoint HTTP response body for the "unauthorized" error.
type ShowUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowForbiddenResponseBody is the type of the "empfetcher" service "show"
// endpoint HTTP response body for the "forbidden" error.
type ShowForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBadGatewayResponseBody is the type of the "empfetcher" service "show"
// endpoint HTTP response body for the "bad_gateway" error.
type ShowBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBadRequestResponseBody is the type of the "empfetcher" service "show"
// endpoint HTTP response body for the "bad_request" error.
type ShowBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowInternalErrorResponseBody is the type of the "empfetcher" service "show"
// endpoint HTTP response body for the "internal_error" error.
type ShowInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteUnauthorizedResponseBody is the type of the "empfetcher" service
// "delete" endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteForbiddenResponseBody is the type of the "empfetcher" service "delete"
// endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteBadGatewayResponseBody is the type of the "empfetcher" service
// "delete" endpoint HTTP response body for the "bad_gateway" error.
type DeleteBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteBadRequestResponseBody is the type of the "empfetcher" service
// "delete" endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteInternalErrorResponseBody is the type of the "empfetcher" service
// "delete" endpoint HTTP response body for the "internal_error" error.
type DeleteInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RestoreUnauthorizedResponseBody is the type of the "empfetcher" service
// "restore" endpoint HTTP response body for the "unauthorized" error.
type RestoreUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RestoreForbiddenResponseBody is the type of the "empfetcher" service
// "restore" endpoint HTTP response body for the "forbidden" error.
type RestoreForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RestoreBadGatewayResponseBody is the type of the "empfetcher" service
// "restore" endpoint HTTP response body for the "bad_gateway" error.
type RestoreBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RestoreBadRequestResponseBody is the type of the "empfetcher" service
// "restore" endpoint HTTP response body for the "bad_request" error.
type RestoreBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RestoreInternalErrorResponseBody is the type of the "empfetcher" service
// "restore" endpoint HTTP response body for the "internal_error" error.
type RestoreInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ViewdeletedUnauthorizedResponseBody is the type of the "empfetcher" service
// "viewdeleted" endpoint HTTP response body for the "unauthorized" error.
type ViewdeletedUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ViewdeletedForbiddenResponseBody is the type of the "empfetcher" service
// "viewdeleted" endpoint HTTP response body for the "forbidden" error.
type ViewdeletedForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ViewdeletedBadGatewayResponseBody is the type of the "empfetcher" service
// "viewdeleted" endpoint HTTP response body for the "bad_gateway" error.
type ViewdeletedBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ViewdeletedBadRequestResponseBody is the type of the "empfetcher" service
// "viewdeleted" endpoint HTTP response body for the "bad_request" error.
type ViewdeletedBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ViewdeletedInternalErrorResponseBody is the type of the "empfetcher" service
// "viewdeleted" endpoint HTTP response body for the "internal_error" error.
type ViewdeletedInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SearchUnauthorizedResponseBody is the type of the "empfetcher" service
// "search" endpoint HTTP response body for the "unauthorized" error.
type SearchUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SearchForbiddenResponseBody is the type of the "empfetcher" service "search"
// endpoint HTTP response body for the "forbidden" error.
type SearchForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SearchBadGatewayResponseBody is the type of the "empfetcher" service
// "search" endpoint HTTP response body for the "bad_gateway" error.
type SearchBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SearchBadRequestResponseBody is the type of the "empfetcher" service
// "search" endpoint HTTP response body for the "bad_request" error.
type SearchBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SearchInternalErrorResponseBody is the type of the "empfetcher" service
// "search" endpoint HTTP response body for the "internal_error" error.
type SearchInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EmployeePayloadResponse is used to define fields on response body types.
type EmployeePayloadResponse struct {
	// Unique ID of an Employee
	ID string `form:"id" json:"id" xml:"id"`
	// Name of an Employee
	Name string `form:"name" json:"name" xml:"name"`
	// The Department of an Employee
	Department string `form:"department" json:"department" xml:"department"`
	// Address of an Employee
	Address string `form:"address" json:"address" xml:"address"`
	// Skillsets of an Employee
	Skills string `form:"skills" json:"skills" xml:"skills"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "empfetcher" service.
func NewListResponseBody(res []*empfetcher.EmployeePayload) ListResponseBody {
	body := make([]*EmployeePayloadResponse, len(res))
	for i, val := range res {
		body[i] = marshalEmpfetcherEmployeePayloadToEmployeePayloadResponse(val)
	}
	return body
}

// NewShowOKResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "empfetcher" service.
func NewShowOKResponseBody(res *empfetcher.EmployeePayload) *ShowOKResponseBody {
	body := &ShowOKResponseBody{
		ID:         res.ID,
		Name:       res.Name,
		Department: res.Department,
		Address:    res.Address,
		Skills:     res.Skills,
	}
	return body
}

// NewViewdeletedResponseBody builds the HTTP response body from the result of
// the "viewdeleted" endpoint of the "empfetcher" service.
func NewViewdeletedResponseBody(res []*empfetcher.EmployeePayload) ViewdeletedResponseBody {
	body := make([]*EmployeePayloadResponse, len(res))
	for i, val := range res {
		body[i] = marshalEmpfetcherEmployeePayloadToEmployeePayloadResponse(val)
	}
	return body
}

// NewSearchResponseBody builds the HTTP response body from the result of the
// "search" endpoint of the "empfetcher" service.
func NewSearchResponseBody(res []*empfetcher.EmployeePayload) SearchResponseBody {
	body := make([]*EmployeePayloadResponse, len(res))
	for i, val := range res {
		body[i] = marshalEmpfetcherEmployeePayloadToEmployeePayloadResponse(val)
	}
	return body
}

// NewAddUnauthorizedResponseBody builds the HTTP response body from the result
// of the "add" endpoint of the "empfetcher" service.
func NewAddUnauthorizedResponseBody(res *goa.ServiceError) *AddUnauthorizedResponseBody {
	body := &AddUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddForbiddenResponseBody builds the HTTP response body from the result of
// the "add" endpoint of the "empfetcher" service.
func NewAddForbiddenResponseBody(res *goa.ServiceError) *AddForbiddenResponseBody {
	body := &AddForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddBadGatewayResponseBody builds the HTTP response body from the result
// of the "add" endpoint of the "empfetcher" service.
func NewAddBadGatewayResponseBody(res *goa.ServiceError) *AddBadGatewayResponseBody {
	body := &AddBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddBadRequestResponseBody builds the HTTP response body from the result
// of the "add" endpoint of the "empfetcher" service.
func NewAddBadRequestResponseBody(res *goa.ServiceError) *AddBadRequestResponseBody {
	body := &AddBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddInternalErrorResponseBody builds the HTTP response body from the
// result of the "add" endpoint of the "empfetcher" service.
func NewAddInternalErrorResponseBody(res *goa.ServiceError) *AddInternalErrorResponseBody {
	body := &AddInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "empfetcher" service.
func NewUpdateUnauthorizedResponseBody(res *goa.ServiceError) *UpdateUnauthorizedResponseBody {
	body := &UpdateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateForbiddenResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "empfetcher" service.
func NewUpdateForbiddenResponseBody(res *goa.ServiceError) *UpdateForbiddenResponseBody {
	body := &UpdateForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBadGatewayResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "empfetcher" service.
func NewUpdateBadGatewayResponseBody(res *goa.ServiceError) *UpdateBadGatewayResponseBody {
	body := &UpdateBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "empfetcher" service.
func NewUpdateBadRequestResponseBody(res *goa.ServiceError) *UpdateBadRequestResponseBody {
	body := &UpdateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateInternalErrorResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "empfetcher" service.
func NewUpdateInternalErrorResponseBody(res *goa.ServiceError) *UpdateInternalErrorResponseBody {
	body := &UpdateInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListUnauthorizedResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "empfetcher" service.
func NewListUnauthorizedResponseBody(res *goa.ServiceError) *ListUnauthorizedResponseBody {
	body := &ListUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListForbiddenResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "empfetcher" service.
func NewListForbiddenResponseBody(res *goa.ServiceError) *ListForbiddenResponseBody {
	body := &ListForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListBadGatewayResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "empfetcher" service.
func NewListBadGatewayResponseBody(res *goa.ServiceError) *ListBadGatewayResponseBody {
	body := &ListBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListBadRequestResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "empfetcher" service.
func NewListBadRequestResponseBody(res *goa.ServiceError) *ListBadRequestResponseBody {
	body := &ListBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListInternalErrorResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "empfetcher" service.
func NewListInternalErrorResponseBody(res *goa.ServiceError) *ListInternalErrorResponseBody {
	body := &ListInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowUnauthorizedResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "empfetcher" service.
func NewShowUnauthorizedResponseBody(res *goa.ServiceError) *ShowUnauthorizedResponseBody {
	body := &ShowUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowForbiddenResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "empfetcher" service.
func NewShowForbiddenResponseBody(res *goa.ServiceError) *ShowForbiddenResponseBody {
	body := &ShowForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBadGatewayResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "empfetcher" service.
func NewShowBadGatewayResponseBody(res *goa.ServiceError) *ShowBadGatewayResponseBody {
	body := &ShowBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBadRequestResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "empfetcher" service.
func NewShowBadRequestResponseBody(res *goa.ServiceError) *ShowBadRequestResponseBody {
	body := &ShowBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowInternalErrorResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "empfetcher" service.
func NewShowInternalErrorResponseBody(res *goa.ServiceError) *ShowInternalErrorResponseBody {
	body := &ShowInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteUnauthorizedResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "empfetcher" service.
func NewDeleteUnauthorizedResponseBody(res *goa.ServiceError) *DeleteUnauthorizedResponseBody {
	body := &DeleteUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteForbiddenResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "empfetcher" service.
func NewDeleteForbiddenResponseBody(res *goa.ServiceError) *DeleteForbiddenResponseBody {
	body := &DeleteForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteBadGatewayResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "empfetcher" service.
func NewDeleteBadGatewayResponseBody(res *goa.ServiceError) *DeleteBadGatewayResponseBody {
	body := &DeleteBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteBadRequestResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "empfetcher" service.
func NewDeleteBadRequestResponseBody(res *goa.ServiceError) *DeleteBadRequestResponseBody {
	body := &DeleteBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteInternalErrorResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "empfetcher" service.
func NewDeleteInternalErrorResponseBody(res *goa.ServiceError) *DeleteInternalErrorResponseBody {
	body := &DeleteInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRestoreUnauthorizedResponseBody builds the HTTP response body from the
// result of the "restore" endpoint of the "empfetcher" service.
func NewRestoreUnauthorizedResponseBody(res *goa.ServiceError) *RestoreUnauthorizedResponseBody {
	body := &RestoreUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRestoreForbiddenResponseBody builds the HTTP response body from the
// result of the "restore" endpoint of the "empfetcher" service.
func NewRestoreForbiddenResponseBody(res *goa.ServiceError) *RestoreForbiddenResponseBody {
	body := &RestoreForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRestoreBadGatewayResponseBody builds the HTTP response body from the
// result of the "restore" endpoint of the "empfetcher" service.
func NewRestoreBadGatewayResponseBody(res *goa.ServiceError) *RestoreBadGatewayResponseBody {
	body := &RestoreBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRestoreBadRequestResponseBody builds the HTTP response body from the
// result of the "restore" endpoint of the "empfetcher" service.
func NewRestoreBadRequestResponseBody(res *goa.ServiceError) *RestoreBadRequestResponseBody {
	body := &RestoreBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRestoreInternalErrorResponseBody builds the HTTP response body from the
// result of the "restore" endpoint of the "empfetcher" service.
func NewRestoreInternalErrorResponseBody(res *goa.ServiceError) *RestoreInternalErrorResponseBody {
	body := &RestoreInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewViewdeletedUnauthorizedResponseBody builds the HTTP response body from
// the result of the "viewdeleted" endpoint of the "empfetcher" service.
func NewViewdeletedUnauthorizedResponseBody(res *goa.ServiceError) *ViewdeletedUnauthorizedResponseBody {
	body := &ViewdeletedUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewViewdeletedForbiddenResponseBody builds the HTTP response body from the
// result of the "viewdeleted" endpoint of the "empfetcher" service.
func NewViewdeletedForbiddenResponseBody(res *goa.ServiceError) *ViewdeletedForbiddenResponseBody {
	body := &ViewdeletedForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewViewdeletedBadGatewayResponseBody builds the HTTP response body from the
// result of the "viewdeleted" endpoint of the "empfetcher" service.
func NewViewdeletedBadGatewayResponseBody(res *goa.ServiceError) *ViewdeletedBadGatewayResponseBody {
	body := &ViewdeletedBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewViewdeletedBadRequestResponseBody builds the HTTP response body from the
// result of the "viewdeleted" endpoint of the "empfetcher" service.
func NewViewdeletedBadRequestResponseBody(res *goa.ServiceError) *ViewdeletedBadRequestResponseBody {
	body := &ViewdeletedBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewViewdeletedInternalErrorResponseBody builds the HTTP response body from
// the result of the "viewdeleted" endpoint of the "empfetcher" service.
func NewViewdeletedInternalErrorResponseBody(res *goa.ServiceError) *ViewdeletedInternalErrorResponseBody {
	body := &ViewdeletedInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSearchUnauthorizedResponseBody builds the HTTP response body from the
// result of the "search" endpoint of the "empfetcher" service.
func NewSearchUnauthorizedResponseBody(res *goa.ServiceError) *SearchUnauthorizedResponseBody {
	body := &SearchUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSearchForbiddenResponseBody builds the HTTP response body from the result
// of the "search" endpoint of the "empfetcher" service.
func NewSearchForbiddenResponseBody(res *goa.ServiceError) *SearchForbiddenResponseBody {
	body := &SearchForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSearchBadGatewayResponseBody builds the HTTP response body from the
// result of the "search" endpoint of the "empfetcher" service.
func NewSearchBadGatewayResponseBody(res *goa.ServiceError) *SearchBadGatewayResponseBody {
	body := &SearchBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSearchBadRequestResponseBody builds the HTTP response body from the
// result of the "search" endpoint of the "empfetcher" service.
func NewSearchBadRequestResponseBody(res *goa.ServiceError) *SearchBadRequestResponseBody {
	body := &SearchBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSearchInternalErrorResponseBody builds the HTTP response body from the
// result of the "search" endpoint of the "empfetcher" service.
func NewSearchInternalErrorResponseBody(res *goa.ServiceError) *SearchInternalErrorResponseBody {
	body := &SearchInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddEmployeePayload builds a empfetcher service add endpoint payload.
func NewAddEmployeePayload(body *AddRequestBody) *empfetcher.EmployeePayload {
	v := &empfetcher.EmployeePayload{
		ID:         *body.ID,
		Name:       *body.Name,
		Department: *body.Department,
		Address:    *body.Address,
		Skills:     *body.Skills,
	}

	return v
}

// NewUpdateEmployeePayload builds a empfetcher service update endpoint payload.
func NewUpdateEmployeePayload(body *UpdateRequestBody, id string) *empfetcher.EmployeePayload {
	v := &empfetcher.EmployeePayload{
		Name:       *body.Name,
		Department: *body.Department,
		Address:    *body.Address,
		Skills:     *body.Skills,
	}
	v.ID = id

	return v
}

// NewShowPayload builds a empfetcher service show endpoint payload.
func NewShowPayload(id string) *empfetcher.ShowPayload {
	v := &empfetcher.ShowPayload{}
	v.ID = id

	return v
}

// NewDeletePayload builds a empfetcher service delete endpoint payload.
func NewDeletePayload(id string, permdelete bool) *empfetcher.DeletePayload {
	v := &empfetcher.DeletePayload{}
	v.ID = id
	v.Permdelete = &permdelete

	return v
}

// NewRestorePayload builds a empfetcher service restore endpoint payload.
func NewRestorePayload(id string) *empfetcher.RestorePayload {
	v := &empfetcher.RestorePayload{}
	v.ID = id

	return v
}

// NewSearchPayload builds a empfetcher service search endpoint payload.
func NewSearchPayload(name string) *empfetcher.SearchPayload {
	v := &empfetcher.SearchPayload{}
	v.Name = name

	return v
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Department == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("department", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Skills == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("skills", "body"))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Department == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("department", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Skills == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("skills", "body"))
	}
	return
}
