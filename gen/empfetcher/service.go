// Code generated by goa v3.2.0, DO NOT EDIT.
//
// empfetcher service
//
// Command:
// $ goa gen github.com/flexera/empfetcher/design

package empfetcher

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Service is the empfetcher service interface.
type Service interface {
	// Adds an Employee Details
	Add(context.Context, *EmployeePayload) (err error)
	// Updates an Employee Details
	Update(context.Context, *EmployeePayload) (err error)
	// List All Employee Details
	List(context.Context) (res []*EmployeePayload, err error)
	// Show Employee Details based on ID
	Show(context.Context, *ShowPayload) (res *EmployeePayload, err error)
	// Delete Employee Details
	Delete(context.Context, *DeletePayload) (err error)
	// Restores an Employee Details
	Restore(context.Context, *RestorePayload) (err error)
	// View All deactivated Employee Details
	Viewdeleted(context.Context) (res []*EmployeePayload, err error)
	// Search employees by name
	Search(context.Context, *SearchPayload) (res []*EmployeePayload, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "empfetcher"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [8]string{"add", "update", "list", "show", "delete", "restore", "viewdeleted", "search"}

// EmployeePayload is the payload type of the empfetcher service add method.
type EmployeePayload struct {
	// Unique ID of an Employee
	ID string
	// Name of an Employee
	Name string
	// The Department of an Employee
	Department string
	// Address of an Employee
	Address string
	// Skillsets of an Employee
	Skills string
}

// ShowPayload is the payload type of the empfetcher service show method.
type ShowPayload struct {
	// ID is the unique id of an employee
	ID string
}

// DeletePayload is the payload type of the empfetcher service delete method.
type DeletePayload struct {
	// ID is the unique id of an employee
	ID string
	// Delete Permanently if this is yes
	Permdelete *bool
}

// RestorePayload is the payload type of the empfetcher service restore method.
type RestorePayload struct {
	// ID is the unique id of an employee
	ID string
}

// SearchPayload is the payload type of the empfetcher service search method.
type SearchPayload struct {
	// Search to search employee records
	SearchString string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "forbidden",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadGateway builds a goa.ServiceError from an error.
func MakeBadGateway(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_gateway",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
