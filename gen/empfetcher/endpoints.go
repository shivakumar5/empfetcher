// Code generated by goa v3.2.0, DO NOT EDIT.
//
// empfetcher endpoints
//
// Command:
// $ goa gen github.com/flexera/empfetcher/design

package empfetcher

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "empfetcher" service endpoints.
type Endpoints struct {
	Add         goa.Endpoint
	Update      goa.Endpoint
	List        goa.Endpoint
	Show        goa.Endpoint
	Delete      goa.Endpoint
	Restore     goa.Endpoint
	Viewdeleted goa.Endpoint
	Search      goa.Endpoint
}

// NewEndpoints wraps the methods of the "empfetcher" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Add:         NewAddEndpoint(s),
		Update:      NewUpdateEndpoint(s),
		List:        NewListEndpoint(s),
		Show:        NewShowEndpoint(s),
		Delete:      NewDeleteEndpoint(s),
		Restore:     NewRestoreEndpoint(s),
		Viewdeleted: NewViewdeletedEndpoint(s),
		Search:      NewSearchEndpoint(s),
	}
}

// Use applies the given middleware to all the "empfetcher" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Add = m(e.Add)
	e.Update = m(e.Update)
	e.List = m(e.List)
	e.Show = m(e.Show)
	e.Delete = m(e.Delete)
	e.Restore = m(e.Restore)
	e.Viewdeleted = m(e.Viewdeleted)
	e.Search = m(e.Search)
}

// NewAddEndpoint returns an endpoint function that calls the method "add" of
// service "empfetcher".
func NewAddEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*EmployeePayload)
		return nil, s.Add(ctx, p)
	}
}

// NewUpdateEndpoint returns an endpoint function that calls the method
// "update" of service "empfetcher".
func NewUpdateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*EmployeePayload)
		return nil, s.Update(ctx, p)
	}
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "empfetcher".
func NewListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.List(ctx)
	}
}

// NewShowEndpoint returns an endpoint function that calls the method "show" of
// service "empfetcher".
func NewShowEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ShowPayload)
		return s.Show(ctx, p)
	}
}

// NewDeleteEndpoint returns an endpoint function that calls the method
// "delete" of service "empfetcher".
func NewDeleteEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeletePayload)
		return nil, s.Delete(ctx, p)
	}
}

// NewRestoreEndpoint returns an endpoint function that calls the method
// "restore" of service "empfetcher".
func NewRestoreEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*RestorePayload)
		return nil, s.Restore(ctx, p)
	}
}

// NewViewdeletedEndpoint returns an endpoint function that calls the method
// "viewdeleted" of service "empfetcher".
func NewViewdeletedEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Viewdeleted(ctx)
	}
}

// NewSearchEndpoint returns an endpoint function that calls the method
// "search" of service "empfetcher".
func NewSearchEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SearchPayload)
		return s.Search(ctx, p)
	}
}
